{"version":3,"file":"ng-lazy-services.js.map","sources":["ng://ng-lazy-services/lib/ng-lazy-services.module.ts","ng://ng-lazy-services/lib/ng-lazy-services-loader.service.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\n\nexport interface NgLazyServicesConfig {\n  [key: string]: string;\n}\n\nexport const NgLazyServicesConfigToken = new InjectionToken<NgLazyServicesConfig>('NgLazyServicesConfig');\n\n@NgModule({\n  imports: [\n  ]\n})\nexport class NgLazyServicesModule {\n  static forRoot(config: NgLazyServicesConfig): ModuleWithProviders {\n    return {\n      ngModule: NgLazyServicesModule,\n      providers: [\n        {\n          provide: NgLazyServicesConfigToken,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { Injectable, InjectionToken, Injector, NgModuleFactoryLoader, NgModuleFactory, Inject, NgModule } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\n\nimport { NgLazyServicesConfigToken, NgLazyServicesConfig } from './ng-lazy-services.module';\n\nexport const FACADE_SERVICE = new InjectionToken<string>('FacadeService');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgLazyServicesLoaderService {\n  constructor(\n    private injector: Injector,\n    private loader: NgModuleFactoryLoader,\n    @Inject(NgLazyServicesConfigToken) private config: NgLazyServicesConfig\n  ) { }\n\n  load<T>(key: string): Observable<T> {\n    if (this.config[key]) {\n      return from(this.moduleLoad(this.config[key]));\n    } else {\n      return throwError(new Error(`Key '${key}' not found, check NgLazyServicesModule.forRoot() configuration`));\n    }\n  }\n\n  private moduleLoad<T>(loadModuleStr): Promise<T> {\n    return this.loader.load(loadModuleStr)\n      .then((moduleFactory: NgModuleFactory<T>) => this.moduleLoadMiddleware<T>(moduleFactory));\n  }\n\n  private moduleLoadMiddleware<T>(moduleFactory: NgModuleFactory<T>): T {\n    console.log(moduleFactory);\n    const moduleRef = moduleFactory.create(this.injector);\n    const facadeService = moduleRef.injector.get(FACADE_SERVICE) as unknown;\n\n    return facadeService as T;\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAAA;AAMA,IAAa,yBAAyB,GAAG,IAAI,cAAc,CAAuB,sBAAsB,CAAC;AAEzG;IAAA;KAgBC;;;;;IAXQ,4BAAO;;;;IAAd,UAAe,MAA4B;QACzC,OAAO;YACL,QAAQ,EAAE,oBAAoB;YAC9B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,yBAAyB;oBAClC,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;KACH;;gBAfF,QAAQ,SAAC;oBACR,OAAO,EAAE,EACR;iBACF;;IAaD,2BAAC;CAhBD;;;;;;ACRA;AAKA,IAAa,cAAc,GAAG,IAAI,cAAc,CAAS,eAAe,CAAC;AAEzE;IAIE,qCACU,QAAkB,EAClB,MAA6B,EACM,MAA4B;QAF/D,aAAQ,GAAR,QAAQ,CAAU;QAClB,WAAM,GAAN,MAAM,CAAuB;QACM,WAAM,GAAN,MAAM,CAAsB;KACpE;;;;;;IAEL,0CAAI;;;;;IAAJ,UAAQ,GAAW;QACjB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChD;aAAM;YACL,OAAO,UAAU,CAAC,IAAI,KAAK,CAAC,UAAQ,GAAG,oEAAiE,CAAC,CAAC,CAAC;SAC5G;KACF;;;;;;;IAEO,gDAAU;;;;;;IAAlB,UAAsB,aAAa;QAAnC,iBAGC;QAFC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;aACnC,IAAI,CAAC,UAAC,aAAiC,IAAK,OAAA,KAAI,CAAC,oBAAoB,CAAI,aAAa,CAAC,GAAA,CAAC,CAAC;KAC7F;;;;;;;IAEO,0DAAoB;;;;;;IAA5B,UAAgC,aAAiC;QAC/D,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;YACrB,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;YAC/C,aAAa,sBAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,EAAW;QAEvE,0BAAO,aAAa,GAAM;KAC3B;;gBA7BF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAToC,QAAQ;gBAAE,qBAAqB;gDAc/D,MAAM,SAAC,yBAAyB;;;sCAdrC;CAOA;;;;;;;;;;;;;;"}
