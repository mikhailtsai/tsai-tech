{"version":3,"sources":["ng://ng-lazy-services/lib/ng-lazy-services.module.ts","ng://ng-lazy-services/lib/ng-lazy-services-loader.service.ts"],"names":["NgLazyServicesConfigToken","InjectionToken","NgLazyServicesModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","args","imports","FACADE_SERVICE","NgLazyServicesLoaderService","injector","loader","this","prototype","load","key","from","moduleLoad","throwError","Error","loadModuleStr","_this","then","moduleFactory","moduleLoadMiddleware","console","log","create","get","Injectable","providedIn","Injector","NgModuleFactoryLoader","Inject"],"mappings":"8SAMA,IAAaA,EAA4B,IAAIC,EAAAA,eAAqC,wBAElFC,EAAA,WAAA,SAAAA,KAgBA,OAXSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT,CACEC,QAASP,EACTQ,SAAUJ,0BAXnBK,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,OAeXT,EAhBA,GCHaU,EAAiB,IAAIX,EAAAA,eAAuB,iBAEzDY,EAAA,WAIE,SAAAA,EACUC,EACAC,EACmCX,GAFnCY,KAAAF,SAAAA,EACAE,KAAAD,OAAAA,EACmCC,KAAAZ,OAAAA,SAG7CS,EAAAI,UAAAC,KAAA,SAAQC,GACN,OAAIH,KAAKZ,OAAOe,GACPC,EAAAA,KAAKJ,KAAKK,WAAWL,KAAKZ,OAAOe,KAEjCG,EAAAA,WAAW,IAAIC,MAAM,QAAQJ,EAAG,qEAInCN,EAAAI,UAAAI,WAAR,SAAsBG,GAAtB,IAAAC,EAAAT,KACE,OAAOA,KAAKD,OAAOG,KAAKM,GACrBE,KAAK,SAACC,GAAsC,OAAAF,EAAKG,qBAAwBD,MAGtEd,EAAAI,UAAAW,qBAAR,SAAgCD,GAK9B,OAJAE,QAAQC,IAAIH,GACMA,EAAcI,OAAOf,KAAKF,UACZA,SAASkB,IAAIpB,wBA1BhDqB,EAAAA,WAAUvB,KAAA,CAAC,CACVwB,WAAY,oDARuBC,EAAAA,gBAAUC,EAAAA,yDAc1CC,EAAAA,OAAM3B,KAAA,CAACV,iLAPZ","sourcesContent":["import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\n\nexport interface NgLazyServicesConfig {\n  [key: string]: string;\n}\n\nexport const NgLazyServicesConfigToken = new InjectionToken<NgLazyServicesConfig>('NgLazyServicesConfig');\n\n@NgModule({\n  imports: [\n  ]\n})\nexport class NgLazyServicesModule {\n  static forRoot(config: NgLazyServicesConfig): ModuleWithProviders {\n    return {\n      ngModule: NgLazyServicesModule,\n      providers: [\n        {\n          provide: NgLazyServicesConfigToken,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { Injectable, InjectionToken, Injector, NgModuleFactoryLoader, NgModuleFactory, Inject, NgModule } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\n\nimport { NgLazyServicesConfigToken, NgLazyServicesConfig } from './ng-lazy-services.module';\n\nexport const FACADE_SERVICE = new InjectionToken<string>('FacadeService');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgLazyServicesLoaderService {\n  constructor(\n    private injector: Injector,\n    private loader: NgModuleFactoryLoader,\n    @Inject(NgLazyServicesConfigToken) private config: NgLazyServicesConfig\n  ) { }\n\n  load<T>(key: string): Observable<T> {\n    if (this.config[key]) {\n      return from(this.moduleLoad(this.config[key]));\n    } else {\n      return throwError(new Error(`Key '${key}' not found, check NgLazyServicesModule.forRoot() configuration`));\n    }\n  }\n\n  private moduleLoad<T>(loadModuleStr): Promise<T> {\n    return this.loader.load(loadModuleStr)\n      .then((moduleFactory: NgModuleFactory<T>) => this.moduleLoadMiddleware<T>(moduleFactory));\n  }\n\n  private moduleLoadMiddleware<T>(moduleFactory: NgModuleFactory<T>): T {\n    console.log(moduleFactory);\n    const moduleRef = moduleFactory.create(this.injector);\n    const facadeService = moduleRef.injector.get(FACADE_SERVICE) as unknown;\n\n    return facadeService as T;\n  }\n}\n"]}