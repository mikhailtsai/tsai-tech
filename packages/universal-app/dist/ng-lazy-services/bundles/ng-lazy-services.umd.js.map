{"version":3,"file":"ng-lazy-services.umd.js.map","sources":["ng://ng-lazy-services/lib/ng-lazy-services.module.ts","ng://ng-lazy-services/lib/ng-lazy-services-loader.service.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\n\nexport interface NgLazyServicesConfig {\n  [key: string]: string;\n}\n\nexport const NgLazyServicesConfigToken = new InjectionToken<NgLazyServicesConfig>('NgLazyServicesConfig');\n\n@NgModule({\n  imports: [\n  ]\n})\nexport class NgLazyServicesModule {\n  static forRoot(config: NgLazyServicesConfig): ModuleWithProviders {\n    return {\n      ngModule: NgLazyServicesModule,\n      providers: [\n        {\n          provide: NgLazyServicesConfigToken,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n","import { Injectable, InjectionToken, Injector, NgModuleFactoryLoader, NgModuleFactory, Inject, NgModule } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\n\nimport { NgLazyServicesConfigToken, NgLazyServicesConfig } from './ng-lazy-services.module';\n\nexport const FACADE_SERVICE = new InjectionToken<string>('FacadeService');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgLazyServicesLoaderService {\n  constructor(\n    private injector: Injector,\n    private loader: NgModuleFactoryLoader,\n    @Inject(NgLazyServicesConfigToken) private config: NgLazyServicesConfig\n  ) { }\n\n  load<T>(key: string): Observable<T> {\n    if (this.config[key]) {\n      return from(this.moduleLoad(this.config[key]));\n    } else {\n      return throwError(new Error(`Key '${key}' not found, check NgLazyServicesModule.forRoot() configuration`));\n    }\n  }\n\n  private moduleLoad<T>(loadModuleStr): Promise<T> {\n    return this.loader.load(loadModuleStr)\n      .then((moduleFactory: NgModuleFactory<T>) => this.moduleLoadMiddleware<T>(moduleFactory));\n  }\n\n  private moduleLoadMiddleware<T>(moduleFactory: NgModuleFactory<T>): T {\n    console.log(moduleFactory);\n    const moduleRef = moduleFactory.create(this.injector);\n    const facadeService = moduleRef.injector.get(FACADE_SERVICE) as unknown;\n\n    return facadeService as T;\n  }\n}\n"],"names":["InjectionToken","NgModule","from","throwError","Injectable","Injector","NgModuleFactoryLoader","Inject"],"mappings":";;;;;;;;;;AAAA;AAMA,QAAa,yBAAyB,GAAG,IAAIA,iBAAc,CAAuB,sBAAsB,CAAC;AAEzG;QAAA;SAgBC;;;;;QAXQ,4BAAO;;;;YAAd,UAAe,MAA4B;gBACzC,OAAO;oBACL,QAAQ,EAAE,oBAAoB;oBAC9B,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,yBAAyB;4BAClC,QAAQ,EAAE,MAAM;yBACjB;qBACF;iBACF,CAAC;aACH;;oBAfFC,WAAQ,SAAC;wBACR,OAAO,EAAE,EACR;qBACF;;QAaD,2BAAC;KAhBD;;;;;;ACRA;AAKA,QAAa,cAAc,GAAG,IAAID,iBAAc,CAAS,eAAe,CAAC;AAEzE;QAIE,qCACU,QAAkB,EAClB,MAA6B,EACM,MAA4B;YAF/D,aAAQ,GAAR,QAAQ,CAAU;YAClB,WAAM,GAAN,MAAM,CAAuB;YACM,WAAM,GAAN,MAAM,CAAsB;SACpE;;;;;;QAEL,0CAAI;;;;;YAAJ,UAAQ,GAAW;gBACjB,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;oBACpB,OAAOE,SAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAChD;qBAAM;oBACL,OAAOC,eAAU,CAAC,IAAI,KAAK,CAAC,UAAQ,GAAG,oEAAiE,CAAC,CAAC,CAAC;iBAC5G;aACF;;;;;;;QAEO,gDAAU;;;;;;YAAlB,UAAsB,aAAa;gBAAnC,iBAGC;gBAFC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;qBACnC,IAAI,CAAC,UAAC,aAAiC,IAAK,OAAA,KAAI,CAAC,oBAAoB,CAAI,aAAa,CAAC,GAAA,CAAC,CAAC;aAC7F;;;;;;;QAEO,0DAAoB;;;;;;YAA5B,UAAgC,aAAiC;gBAC/D,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;oBACrB,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;oBAC/C,aAAa,sBAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,EAAW;gBAEvE,0BAAO,aAAa,GAAM;aAC3B;;oBA7BFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAToCC,WAAQ;wBAAEC,wBAAqB;wDAc/DC,SAAM,SAAC,yBAAyB;;;;0CAdrC;KAOA;;;;;;;;;;;;;;;;;;;;;;;;;"}
